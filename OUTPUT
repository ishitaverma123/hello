

// Initialize the error basket to collect error messages
var errorBasket = [];

// Get required variables
var vraUsername = System.getModule("vworld.domain.local").configElement("vWorld","oneConfig","vraUsername");
var vraPassword = System.getModule("vworld.domain.local").configElement("vWorld","oneConfig","vraPassword");
var vraUrl = System.getModule("vworld.domain.local").configElement("vWorld","oneConfig","vraUrl");
var refreshToken = System.getModule("vworld.domain.local").getRefreshToken(vraUsername,vraPassword,vraUrl);
var bearerToken = System.getModule("vworld.domain.local").getBearerToken(refreshToken,vraUrl);

// Build the URL
var uri = "https://" + vraUrl + "/iaas/api/storage-profiles-vsphere";

// Create or retrieve the REST host using the host's name or alias
var restHostName = "vRA_REST_Host"; // You can adjust this name as needed
var restHost = RESTHostManager.createTransientHostFrom(RESTHostManager.createHost("dynamicRequest"));
restHost.name = restHostName;
restHost.url = uri;
restHost.operationTimeout = 900;

var ld = Config.getKeystores().getImportCAFromUrlAction();
System.log(ld);
var model = ld.getModel();
model.value = uri; 
var error = ld.execute();
if (error) {
    var sslError = "Failed to import SSL certificate. Error: " + error;
    System.error(sslError);
    errorBasket.push(sslError);
    return null;
}

// Create and configure the REST request
var request = restHost.createRequest("GET", uri);
request.setHeader("Content-Type", "application/json");
request.setHeader("Accept", "application/json");
request.setHeader("Authorization", "Bearer "+bearerToken);

// Execute the request and handle the response
var response = request.execute();
if (response.statusCode !== 200) {
    var authError = "Failed to authenticate with vRA. Status: " + response.statusCode + " - " + response.contentAsString;
    System.error(authError);
    errorBasket.push(authError);
    return null;
}

var jsonResponse = JSON.parse(response.contentAsString);
System.log(response.contentAsString);

var datastoreLink = null;
for (var i = 0; i < jsonResponse.content.length; i++) {
    if (jsonResponse.content[i].name.toLowerCase() === desiredName.toLowerCase()) {

        storageItemId = jsonResponse.content[i].id;
        
        System.log("\n Storage Profile ID for '" + desiredName + "': " + storageItemId);
        

        // association url
        var associationUri = "https://" + vraUrl + "/iaas/api/storage-profiles/" + storageItemId + "/storage-profile-associations?apiVersion=2021-07-15&page=0&size=100";
        
        System.log("\n Fetching datastore association from: " + associationUri);

        // Create or retrieve the REST host using the host's name or alias
        var restHostName = "vRA_REST_Host"; // You can adjust this name as needed
        var restHost = RESTHostManager.createTransientHostFrom(RESTHostManager.createHost("dynamicRequest"));
        restHost.name = restHostName;
        restHost.url = uri;
        restHost.operationTimeout = 900;    


        var ld = Config.getKeystores().getImportCAFromUrlAction();
        System.log(ld);     
        var model = ld.getModel();
        model.value = uri; 
        var error = ld.execute();
        if (error) {
            var sslError = "Failed to import SSL certificate. Error: " + error;
            System.error(sslError);
            errorBasket.push(sslError);
            return null;
            }

        
       // Create and configure the REST request
        var associationRequest = restHost.createRequest("GET", associationUri, null);
        associationRequest.setHeader("Content-Type", "application/json");
        associationRequest.setHeader("Accept", "application/json");
        associationRequest.setHeader("Authorization", "Bearer " + bearerToken);

       // Execute the request and handle the response
        var associationResponse = associationRequest.execute();
        if (associationResponse.statusCode !== 200) {
        var assocError = "Failed to fetch storage-profile-associations. Status: " + associationResponse.statusCode + " - " + associationResponse.contentAsString;
        System.error(assocError);
        errorBasket.push(assocError);
        return null;
        }


        var associationJson = JSON.parse(associationResponse.contentAsString);
        System.log("Storage Profile Associations Response: " + associationResponse.contentAsString);
            datastoreLink = jsonResponse.content[i]._links.datastore.href;
            break;



    }
}

if (!datastoreLink) {
    var noStorageError = "No storage profile found with the name: " + desiredName;
    System.error(noStorageError);
    errorBasket.push(noStorageError);
    return null;
}

// Check if there are any errors in the error basket
if (errorBasket.length > 0) {
    var combinedErrorMessage = "Encountered errors during execution:\n";
    for each (var error in errorBasket) {
        combinedErrorMessage += "- " + error + "\n";
    }
    System.error(combinedErrorMessage);
    throw new Error(combinedErrorMessage);
}



return datastoreLink;

input : desriedname : VHH-apl-vhhwvcs41n-vSAN
result error : error(vworld.domain.local/listStorageProfile_Copy) Failed to fetch storage-profile-associations. Status: 400 - {"message":"Invalid request: GET https://10.97.125.136:8282/iaas/api/storage-profiles-vsphere/https:/vra41n.qaoneadr.local/iaas/api/storage-profiles/a38299fd-13c4-49ce-965d-6ab7a3968d56/storage-profile-associations?apiVersion=2021-07-15&page=0&size=100. Check if the api version is supplied or correct. This request is not supported.","statusCode":400,"errorCode":0,"serverErrorId":"08ccc20c-401d-4d98-830c-ffed3b12c824","documentKind":"com:vmware:xenon:common:ServiceErrorResponse"}
